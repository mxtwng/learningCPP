#include <bits/stdc++.h>
using namespace std;
#define ll long long

void getRes(vector<ll>& res, vector<pair<ll, int>>& pFactors,  int i, ll cur) {
    if (i == pFactors.size()) {
        res.push_back(cur);
        return;
    }
    
    ll prime = pFactors[i].first;
    int pCount = pFactors[i].second; // max exponent
    
    ll power = 1;
    for (int exponent = 0; exponent <= pCount; exponent += 2) {
        getRes(res, pFactors, i + 1, cur * power);
        if (exponent + 2 <= pCount)
            power *= (prime*prime);
    }
}

map<ll, int> getFactors(ll n) {
    map<ll, int> factors;
    for (ll d = 2; d * d <= n; d++) {
        while (n % d == 0) {
            factors[d]++;
            n /= d;
        }
    }
    if (n > 1) factors[n]++; //n prime
    return factors;
}

vector<ll> GetPsqDivs(ll n) {
    if (!n) return {};
    
    vector<ll> res;
    map<ll, int> Facts = getFactors(n);
    vector<pair<ll, int>> pFactors(Facts.begin(), Facts.end());
    
    getRes(res, pFactors, 0, 1);
    sort(res.begin(), res.end());
    
    return res;
}

// long long countPerfectSquareDivisors(long long n) { 
//     if (n == 0) return 0; 
//     map<long long, int> factors = primeFactorize(n); 
//     long long count = 1; 
//     for (auto [prime, exp] : factors) { 
//         count *= (exp / 2 + 1); // count = (floor(exp1/2) + 1) x (floor(exp2/2) + 1) x...
//     } 
//     return count; 
// }
int main() {
    cin.tie(NULL); ios::sync_with_stdio(0);
    ll n;
    cin >> n;
    vector<ll> psqDiv = GetPsqDivs(n);
    for (int i = 1; i < psqDiv.size(); i++)
        cout << psqDiv[i] << " ";
    return 0;
}