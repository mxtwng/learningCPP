#include <bits/stdc++.h>
using namespace std;
#define ll long long

struct ST {
    int n;
    vector<ll> tree;
    ST(int n): n(n) {
        tree.assign(n*4, 0);
    }
    
    void update(int node, int l, int r, int pos, ll val) {
        if (l == r){
            tree[node] += val;
            return;
        }
        int mid = (l+r)/2;
        if (pos <= mid) update(node*2, l, mid, pos, val);
        else update(node*2 + 1, mid+1, r, pos, val);
        
        tree[node] = tree[node*2] + tree[node*2 + 1];
    }
    
    ll query(int node, int l, int r, int qleft, int qright) {
        if (qright < l || r < qleft) return 0;
        if (qleft <= l && r <= qright) return tree[node];
        int mid = (l+r)/2;
        return query(node*2, l, mid, qleft, qright) +
               query(node*2 + 1, mid+1, r, qleft, qright);
    }
    
    void update(int pos, ll val) {
        update(1, 0, n-1, pos, val);
    }
    
    ll query(int l, int r) {
        if (l > r) return 0;
        return query(1, 0, n-1, l, r);
    }
};
int main() {
    cin.tie(NULL); ios::sync_with_stdio(0);
    int n, x; cin >> n >> x;
    vector<ll> cowHeight(n);
    for (ll& ch: cowHeight) cin >> ch;
    
    vector<ll> prefix(n+1, 0);
    for (int i = 0; i < n; i++)
        prefix[i+1] = prefix[i] + (cowHeight[i] >= x ? 1 : -1);
    
    vector<ll> value(prefix.begin(), prefix.end());
    sort(value.begin(), value.end());
    value.erase(unique(value.begin(), value.end()), value.end());
    
    auto get = [&](ll k) {
        return int(lower_bound(value.begin(), value.end(), k) - value.begin());
    };
    
    ST seg(value.size());
    ll ans = 0;
    for (int i = 0; i <= n; i++) {
        int pos = get(prefix[i]);
        ans += seg.query(0, pos);
        seg.update(pos, 1);
    }
    
    cout << ans;
}