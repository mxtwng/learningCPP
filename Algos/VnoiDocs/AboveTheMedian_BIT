#include <bits/stdc++.h>
using namespace std;

struct BIT {
    vector<long long> bit;
    int n;
    BIT(int n): n(n), bit(n+1, 0) {}
    
    void update(int i, int value) {
        for (; i <= n; i += i & -i)
            bit[i] += value;
    }
    
    long long query(int i) {
        long long result = 0;
        for (; i > 0; i -= i & -i)
            result += bit[i];
        return result;
    }
};

int main() {
    cin.tie(NULL); ios::sync_with_stdio(0);
    
    int n, x; cin >> n >> x;
    vector<long long> prefix(n+1, 0), h(n+1);
    
    for (int i = 1; i <= n; i++) {
        cin >> h[i];
        prefix[i] = prefix[i-1] + (h[i] >= x ? +1 : -1);
    }
    
    vector<long long> value(prefix.begin(), prefix.end());
    sort(value.begin(), value.end());
    value.erase(unique(value.begin(), value.end()));
    
    auto get = [&](long long v) {
        return int(lower_bound(value.begin(), value.end(), v) 
        - value.begin() + 1);
    };
    
    BIT fenwickTree(value.size());
    long long ans = 0;
    
    for (int i = 0; i <= n; i++) {
        int pos = get(prefix[i]);
        ans += fenwickTree.query(pos);
        fenwickTree.update(pos, 1);
    }
    
    cout << ans;
}
